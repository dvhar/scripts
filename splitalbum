#!/bin/bash
#deps: mp3splt, ffmpeg, youtube-dl

input="$1"
timestamps=$2

chkcommand(){
	command -v $1 &> /dev/null || {
		echo $1 is not installed
		exit
	}
}
chkcommand ffmpeg
chkcommand mp3splt
chkcommand youtube-dl

usage(){
	cat << EOF
usage:
`basename $0` <wav/mp3 file or youtube link> timestamps.txt

example timestamps file:
0:00 The Young Buccaneer
3:36 Pirate Town
6:52 Blackbeard
EOF
	exit
}
[ $# -ne 2 ] || [[ ! "$input" =~ ((wav|mp3)$|youtube) ]] || [[ ! $timestamps =~ .txt$ ]] && usage
[ ! -f $timestamps ] && echo $timestamps does not exit && exit
[[ "$input" =~ (wav|mp3)$ ]] && [ ! -f "$input" ] && echo "$input" does not exit && exit


echo Artist name:
read artist
echo Album name:
read album
echo Genre:
read genre


downloadconvert(){
	if [[ "$input" =~ youtube ]]; then
		infile="/tmp/ym-$(date '+%s%N').wav"
		youtube-dl -x --audio-format wav --prefer-ffmpeg -o $infile --max-downloads 1 "$input"
		trap "rm -f ${infile%%.*}.mp3" EXIT
	else
		infile="$input"
	fi
	if [[ "$infile" =~ wav$ ]]; then
		mp3file="${infile%%.*}.mp3"
		ffmpeg -i "$infile" "$mp3file"
		[ $? -eq 0 ] && rm "$infile"
	else
		mp3file="$infile"
	fi
}

fixtimeformat(){
	if [[ $1 =~ ^[0-9]{1,2}:[0-9]{2}:[0-9]{2}$ ]]; then
		hour=${1%%:*}
		hourmin=${1%:*}
		min=${hourmin#*:}
		[[ $hour =~ ^0*(.+)$ ]] && hour=${BASH_REMATCH[1]}
		[[ $min =~ ^0*(.+)$ ]] && min=${BASH_REMATCH[1]}
		echo $((hour * 60 + min)):${1##*:}
		return
	elif [[ ! $1 =~ ^[0-9]{1,2}:[0-9]{2}$ ]]; then
		echo Bad timestamp file:
		echo $1 does not match the timestamp format 12:34 or 1:23:45
		exit
	fi
	echo $1
}

line(){
	cat >> $cue << EOF
TRACK $(printf "%02d" $count) AUDIO
TITLE "$title"
PERFORMER "$artist"
INDEX 01 ${timestamp}:00
EOF
}

generatecue(){
	cue=$(mktemp --suffix=.cue)
	trap "rm -f $cue" EXIT

	cat > $cue << EOF
REM GENRE $genre
REM DATE 1998
PERFORMER "$artist"
TITLE "$album"
FILE "piratemusic.mp3" MP3
EOF

	let count=0
	while read LINE; do
		timestamp=$(fixtimeformat ${LINE%% *})
		title=${LINE#* }
		let count++
		line
	done < $timestamps
}

splitintofiles(){
	mp3splt -c $cue "$mp3file" -o @t -d ${album// /} || cat $cue
}

downloadconvert
generatecue
splitintofiles
